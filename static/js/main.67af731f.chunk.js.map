{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","inSort","arr","document","getElementsByClassName","mapArr","state","array","sort","a","b","i","j","setTimeout","offsetHeight","tmp","style","height","backgroundColor","length","bubSort","len","resetArray","bind","this","push","randomInterval","setState","max","min","Math","floor","random","className","map","value","idx","key","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,4IC6F5BC,G,YAzFf,YACE,WAAYC,GACX,IAAD,8BACE,4CAAMA,KA4BRC,OAAS,WAEP,IAAIC,EAAMC,SAASC,uBAAuB,aACtCC,EAAS,EAAKC,MAAMC,MACvBF,EAASA,EAAOG,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAIC,KAClC,IAJH,eAIWC,GAEL,IANN,eAMcC,GAEPC,YAAW,WAAW,GAAGX,EAAIU,GAAGE,aAAeZ,EAAIS,GAAGG,aACrD,CACE,IAAIC,EAAMb,EAAIS,GAAGG,aACjBZ,EAAIS,GAAGK,MAAMC,OAAcf,EAAIU,GAAGE,aAAe,KAClDZ,EAAIU,GAAGI,MAAMC,OAAcF,EAAM,KAChCb,EAAIS,GAAGK,MAAME,gBAAkB,WAC7B,MAREN,EAAID,EAAE,EAAGC,EAAIV,EAAIiB,OAAQP,IAChC,EADOA,IAFHD,EAAI,EAAGA,EAAIT,EAAIiB,OAAQR,IAC7B,EADMA,IAlCX,EAiDAS,QAAU,WAIN,IAFA,IAAIlB,EAAMC,SAASC,uBAAuB,aACtCiB,EAAMnB,EAAIiB,OACLR,EAAI,EAAGA,EAAIU,EAAKV,IACvB,IAD6B,IAAD,WACnBC,GACPC,YAAW,WAAW,GAAIX,EAAIU,GAAGE,aAAeZ,EAAIU,EAAI,GAAGE,aAAc,CACzDZ,EAAIU,GAAGI,MAAME,gBACvBhB,EAAIU,GAAGI,MAAME,gBAAkB,MAC/BhB,EAAIU,EAAE,GAAGI,MAAME,gBAAkB,QACjC,IAAIH,EAAMb,EAAIU,GAAGE,aACjBZ,EAAIU,GAAGI,MAAMC,OAAef,EAAIU,EAAI,GAAGE,aAAc,KACrDZ,EAAIU,EAAI,GAAGI,MAAMC,OAAcF,EAAK,QAC/B,MARJH,EAAI,EAAGA,EAAIS,EAAO,EAAIT,IAAM,EAA5BA,IApDb,EAAKU,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKjB,MAAQ,CACXC,MAAM,IAJV,EAFF,iFAYIiB,KAAKF,eAZT,mCAkBI,IADA,IAAMf,EAAQ,GACNI,EAAI,EAAGA,EAAI,IAAKA,IAEtBJ,EAAMkB,KAAKD,KAAKE,eAAe,IAAI,IAErCF,KAAKG,SAAS,CAACpB,YAtBnB,qCAyBiBqB,EAAIC,GAEf,OAAOC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMC,EAAM,GAAKA,KA3B1D,+BAuEC,IACQtB,EAASiB,KAAKlB,MAAdC,MACP,OACE,oCACA,yBAAK0B,UAAU,mBACd1B,EAAM2B,KAAI,SAACC,EAAMC,GAAO,OAAO,yBAAKH,UAAU,YAAYjB,MAAO,CAACC,OAAO,GAAD,OAAIkB,EAAJ,OAAgBE,IAAKD,OAC9F,6BACE,4BAAQE,QAASd,KAAKF,WAAYW,UAAU,UAA5C,mBACA,4BAAQK,QAASd,KAAKvB,OAAQgC,UAAU,UAAxC,kBACA,4BAAQK,QAASd,KAAKJ,QAASa,UAAU,UAAzC,mBAhFN,GAAyBM,IAAMC,YCQXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5C,SAAS6C,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.67af731f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nexport class App extends React.Component {\n  constructor(props)\n  {\n    super(props);\n    this.resetArray = this.resetArray.bind(this);\n    this.state = {\n      array:[],\n    };\n  }\n\n  componentDidMount()\n  {\n    this.resetArray();\n  }\n\n  resetArray()\n  {\n    const array = [];\n    for(let i = 0; i < 250; i++)\n    {\n      array.push(this.randomInterval(500,5));\n    }\n    this.setState({array});\n  }\n\n  randomInterval(max,min)\n  {\n      return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n\n  inSort = () =>\n  {\n    let arr = document.getElementsByClassName(\"array-bar\");\n    let mapArr = this.state.array;\n     mapArr = mapArr.sort((a,b) => a - b);\n     for(let i = 0; i < arr.length; i++)\n      {\n        for(let j = i+1; j < arr.length; j++)\n        {\n         setTimeout(() => {    if(arr[j].offsetHeight < arr[i].offsetHeight)\n          {\n            let tmp = arr[i].offsetHeight;\n            arr[i].style.height = \"\" + arr[j].offsetHeight + \"px\";\n           arr[j].style.height = \"\" + tmp + \"px\";\n            arr[i].style.backgroundColor = \"green\";\n          }}, 500) \n       }\n       }\n    }\n\n  bubSort = () =>\n  {\n      let arr = document.getElementsByClassName(\"array-bar\");\n      let len = arr.length;\n      for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len  - 1 ; j++) {\n          setTimeout(() => {    if (arr[j].offsetHeight > arr[j + 1].offsetHeight) {\n                let org = arr[j].style.backgroundColor;\n                arr[j].style.backgroundColor = \"red\";\n                arr[j+1].style.backgroundColor = \"green\";\n                let tmp = arr[j].offsetHeight;\n                arr[j].style.height =  \"\" + arr[j + 1].offsetHeight +\"px\";\n                arr[j + 1].style.height = \"\" + tmp +\"px\";\n                 }}, 1000);\n            }\n        }\n    }\n  \n\nrender()\n{\n  const {array} = this.state;\n  return (\n    <>\n    <div className=\"array-container\">\n    {array.map((value,idx)=>{return <div className=\"array-bar\" style={{height:`${value}px`}} key={idx}></div>})} \n    <div>\n      <button onClick={this.resetArray} className=\"button\">Random Generate</button>\n      <button onClick={this.inSort} className=\"button\">Insertion Sort</button>\n      <button onClick={this.bubSort} className=\"button\">Bub Sort</button>\n    </div>\n    </div>\n    </>\n  );\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}